import numpy as np
from neural_networks.file_directory_operations import *

def compute_fm_and_torque(model_biorbd, muscle_index, q, qdot, alpha) : 
    """
    Compute muscle forces for a given model, joint positions, velocities, and activations.
    
    Warning:
        This function does not consider muscle wrapping, so the calculation of lmt is done 
        using the via point method (biorbd). Updates are needed to incorporate wrapping 
        effects in biorbd.

    Args:
        model_biorbd (biorbd.Model): The biorbd model.
        q (np.ndarray): Joint positions (angles) for the model.
        qdot (np.ndarray): Joint velocities for the model.
        alpha (np.ndarray): Muscle activations for the muscles in the model [0,1]

    Returns:
        np.ndarray: The computed muscle forces.
    """
    
    # Get the list of muscle states from the model
    states = model_biorbd.stateSet()
    for state in states:
        state.setActivation(alpha)  
    
    # Compute the muscle forces based on the given states, joint positions, and velocities
    fm = model_biorbd.muscleForces(states, q, qdot).to_array()
    tau = model_biorbd.muscularJointTorque(states, q, qdot).to_array()
    
    return fm[muscle_index], tau[muscle_index]

# def compute_fm(model_biorbd, q, qdot, alpha):
#     """
#     Compute muscle forces for a given model, joint positions, velocities, and activations.
    
#     Warning:
#         This function does not consider muscle wrapping, so the calculation of lmt is done 
#         using the via point method (biorbd). Updates are needed to incorporate wrapping 
#         effects in biorbd.

#     Args:
#         model_biorbd (biorbd.Model): The biorbd model.
#         q (np.ndarray): Joint positions (angles) for the model.
#         qdot (np.ndarray): Joint velocities for the model.
#         alpha (np.ndarray): Muscle activations for the muscles in the model [0,1]

#     Returns:
#         np.ndarray: The computed muscle forces.
#     """
    
#     # Get the list of muscle states from the model
#     states = model_biorbd.stateSet()
#     for state in states:
#         state.setActivation(alpha)  
    
#     # Compute the muscle forces based on the given states, joint positions, and velocities
#     f = model_biorbd.muscleForces(states, q, qdot).to_array()
    
#     return f

# def compute_torque(dlmt_dq, f, limit=5000):
#     """
#     Compute the torque based on the Jacobian of muscle length changes and muscle forces.
    
#     Args:
#         dlmt_dq (np.ndarray): The Jacobian matrix of muscle length changes with respect to joint positions.
#         f (np.ndarray): The muscle forces.
#         limit (float, optional): The threshold above which muscle forces are considered excessive. Defaults to 5000.
    
#     Returns:
#         tuple: A tuple containing:
#             - The computed torque.
#             - A boolean flag indicating if any muscle force exceeds the limit.
#     """
    
#     f_sup_limit = False
    
#     if np.any(f >= limit):
#         f_sup_limit = True

#     # Compute the torque using the Jacobian and muscle forces
#     torque = np.dot(-np.transpose(dlmt_dq), f)
#     total_torque = np.sum(torque)
#     # model_biorbd.muscularJointTorque(states, q, qdot).to_array()
    
#     return total_torque, f_sup_limit

# def get_fm_and_torque(model_biorbd, muscle_index, q, qdot, alpha):
#     """
#     Compute the muscle force and joint torque for a specific muscle in the model.

#     Args:
#         model_biorbd (biorbd.Model): The biorbd model.
#         muscle_index (int): Index of the muscle for which to compute force and torque.
#         q (np.ndarray): Joint positions.
#         qdot (np.ndarray): Joint velocities.
#         alpha (np.ndarray): Muscle activations.

#     Returns:
#         tuple: A tuple containing:
#             - The force of the specified muscle.
#             - The joint torque generated by the specified muscle.
#             - A boolean flag indicating if the muscle force exceeds the limit.
#     """
    
#     # Initialize the flag for muscle force exceeding the limit
#     f_sup_limit = False
    
#     # Compute muscle forces
#     fm = compute_fm(model_biorbd, q, qdot, alpha)
    
#     # Compute the joint torques based on the muscle forces
#     tau = model_biorbd.muscularJointTorque(fm).to_array()
    
#     # Check if the force of the specified muscle exceeds the limit
#     if fm[muscle_index] >= 5000:
#         print("ERROR: Muscle force >= 5000 !!!")
#         f_sup_limit = True
    
#     # Return the muscle force, joint torque, and the limit flag
#     return fm[muscle_index], tau[muscle_index], f_sup_limit
